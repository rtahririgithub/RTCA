<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" 
                       "http://www.springframework.org/dtd/spring-beans.dtd">

<beans>
 

  <import resource="base-defn-stub.xml"/>
  <import resource="fw-mailsender-smtp-spring.xml"/>
  <!--  <import resource="fw-mailsender-jms-spring.xml"/>  -->  

  <!-- ===================================================================== -->	
  <bean id="configurationFramework"
        class="com.telus.framework.config.spring.PlaceholderConfigurer">
  </bean>
  
  <!-- ===================================================================== -->	
  <bean id="job" parent="baseJob">

    <property name="applicationName"><value>CreditMgmt-Batch</value></property>
    <property name="jobName">        <value>Merge</value></property>
    <property name="steps">
      <list>
        <!-- bean id="STEP01" parent="baseStep" >
          <property name="moduleName"><value>merge-mapSpool</value></property>
        </bean>
        <bean id="STEP02" parent="baseStep" >
          <property name="moduleName"><value>merge-fileSplitter</value></property>
        </bean>
        <bean id="STEP03" parent="baseStep" >
          <property name="moduleName"><value>merge-sort</value></property>
        </bean>
        <bean id="STEP04" parent="baseStep" >
          <property name="moduleName"><value>profileGroupExtract</value></property>
        </bean-->
        <bean id="STEP05" parent="baseStep" >
          <property name="moduleName"><value>merge</value></property>
        </bean>
        <!-- bean id="STEP06" parent="baseStep" >
          <property name="moduleName"><value>report</value></property>
        </bean>
        <bean id="STEP07" parent="baseStep" >
          <property name="moduleName"><value>sendReport</value></property>
        </bean-->
      </list>
    </property>
  </bean>
  
   <bean id="merge-mapSpool" lazy-init="true"
        class="com.telus.framework.batch.module.ExecModule" >
    <property name="executable">    <value>${merge-mapSpool/exec}</value></property>
    <property name="failOnError">   <value>true</value></property>
    <property name="newEnvironment"><value>true</value></property>
    <property name="env">
      <list>
      </list>
    </property>
   </bean>
   
   <bean id="merge-fileSplitter" lazy-init="true"
        class="com.telus.credit.batch.extract.SplitFileBatch" >
    <property name="inputFile"><value>${merge-fileSplitter/inputFile}</value></property>
    <property name="singleCustomerOutputFile"><value>${merge-fileSplitter/singleCustomerOutputFile}</value></property>
    <property name="multiCustomerOutputFile"><value>${merge-fileSplitter/multiCustomerOutputFile}</value></property>
  </bean>
   
   <bean id="merge-sort" lazy-init="true"
        class="com.telus.framework.batch.module.ExecModule" >
    <property name="executable">    <value>${merge-sort/exec}</value></property>
    <property name="arg">           <value>${merge-sort/arg}</value></property>
    <!-- property name="dir">           <value>${merge-sort/dir}</value></property-->
    <property name="failOnError">   <value>true</value></property>
    <property name="newEnvironment"><value>true</value></property>
    <property name="env">
      <list>
      </list>
    </property>
   </bean>
  
  <bean id="profileGroupExtract" lazy-init="true"
        class="com.telus.credit.batch.merge.ExtractProfileGroupBatch" >
    <property name="inputFileSortByProfileId"><value>${profileGroupExtract/inputFileSortByProfileId}</value></property>
    <property name="inputFileSortByCustomerId"><value>${profileGroupExtract/inputFileSortByCustomerId}</value></property>
    <property name="outputFile"><value>${profileGroupExtract/outputFile}</value></property>
  </bean>
  
  <bean id="merge" lazy-init="true"
        class="com.telus.credit.batch.merge.MergeCreditProfileBatch" >
    <property name="creditProfileDao"><ref bean="creditProfileDao"/></property> 
    <property name="creditProfileMapDao"><ref bean="creditProfileMapDao"/></property>
    <property name="profileCustomerMapDao"><ref bean="profileCustomerMapDao"/></property>
    <property name="guarantorDao"><ref bean="guarantorDao"/></property> 
    <property name="creditIDCardDao"><ref bean="creditIDCardDao"/></property> 
    <property name="creditAddressDao"><ref bean="creditAddressDao"/></property> 
    <property name="creditStatusDao"><ref bean="creditStatusDao"/></property>       
    <property name="inputFile"><value>${merge/inputFile}</value></property>
    <property name="outputFile"><value>${merge/outputFile}</value></property>
    
  </bean>
  
  <bean id="report" lazy-init="true"
        class="com.telus.credit.batch.merge.GenerateDiscrepancyReportBatch" >
    <property name="creditProfileDao"><ref bean="creditProfileDao"/></property>  
    <property name="inputFile"><value>${report/inputFile}</value></property>
    <property name="outputFile"><value>${report/outputFile}</value></property>
    <property name="billingAccountMgtSvc"><ref bean="billingAccountMgtSvc"/></property>
  </bean>
  
  <bean id="sendReport" lazy-init="true"
        class="com.telus.credit.batch.merge.SendReportBatch" >  
    <property name="inputFile"><value>${sendReport/inputFile}</value></property>
  </bean>

  <!-- ===================================================================== -->
  <bean id="creditProfileDao" lazy-init="true"
        class="com.telus.credit.batch.dao.CreditProfileDaoSqlmap">
    <property name="sqlMapClient"><ref bean="creditProfileSqlMapClient"/></property>
  </bean>
  
  <bean id="creditProfileMapDao" lazy-init="true"
        class="com.telus.credit.batch.dao.CreditProfileMapDaoSqlmap">
    <property name="sqlMapClient"><ref bean="creditProfileSqlMapClient"/></property>
  </bean>
  
  <bean id="profileCustomerMapDao" lazy-init="true"
        class="com.telus.credit.batch.dao.CreditProfileCustomerMapDaoSqlmap">
    <property name="sqlMapClient"><ref bean="creditProfileSqlMapClient"/></property>
  </bean>
  
  <bean id="guarantorDao" lazy-init="true"
        class="com.telus.credit.batch.dao.CustomerGuarantorDaoSqlmap">
    <property name="sqlMapClient"><ref bean="creditProfileSqlMapClient"/></property>
  </bean>
  
  <bean id="creditIDCardDao" lazy-init="true"
        class="com.telus.credit.batch.dao.CreditIDCardDaoSqlmap">
    <property name="sqlMapClient"><ref bean="creditProfileSqlMapClient"/></property>
  </bean>
  
  <bean id="creditAddressDao" lazy-init="true"
        class="com.telus.credit.batch.dao.CreditAddressDaoSqlmap">
    <property name="sqlMapClient"><ref bean="creditProfileSqlMapClient"/></property>
  </bean>
  
  <bean id="creditStatusDao" lazy-init="true"
        class="com.telus.credit.batch.dao.CreditStatusDaoSqlmap">
    <property name="sqlMapClient"><ref bean="creditProfileSqlMapClient"/></property>
  </bean>
  
 <!-- ===================================================================== -->
 
  <bean id="creditProfileSqlMapClient" lazy-init="true"
        class="org.springframework.orm.ibatis.SqlMapClientFactoryBean">
    <property name="configLocation">
      <value>sqlmap/creditBatch-sqlmap-config.xml</value>
      </property>
    <property name="dataSource"><ref bean="${appBeanName/appDbDS}"/></property>
  </bean>
  
  <bean id="jdbc-appDbDS" lazy-init="true"
        class="org.springframework.jdbc.datasource.DriverManagerDataSource">
    <property name="driverClassName">
        <value>oracle.jdbc.driver.OracleDriver</value>
        </property>
    <property name="url"><value>${appJdbc/url}</value></property>
    <property name="username"><value>${appJdbc/username}</value></property>
    <property name="password"><value>${appJdbc/password}</value></property>
  </bean>
  <!-- ===================================================================== -->
  <!-- bean id="customerMgtSvc" lazy-init="true"
        	class="org.springframework.ejb.access.SimpleRemoteStatelessSessionProxyFactoryBean">
    <property name="jndiName"><value>com.telus.customermgt.service.CustomerMgtService</value></property>
    <property name="jndiTemplate"><ref bean="jndiTemplate"/></property>
    <property name="businessInterface"><value>com.telus.customermgt.service.CustomerMgtSvc</value></property>
</bean>
   
<bean id="jndiTemplate" class="org.springframework.jndi.JndiTemplate" >
     <property name="environment">
        <props>
          <prop key="java.naming.factory.initial">weblogic.jndi.WLInitialContextFactory</prop>
          <prop key="java.naming.provider.url">t3://sedm3202.ent.agt.ab.ca:20022</prop>
         </props>
      </property>
</bean--> 

<!-- bean id="billingAccountMgtSvc" class="com.telus.framework.util.spring.ServiceProxy">
    <property name="lookupHomeOnStartup"><value>true</value></property> 
    <property name="serviceType"><value>remote</value></property>   	
    <property name="jndiName"><value>com.telus.customermgt.service.BillingAccountMgtService</value></property>
    <property name="jndiEnvironment"> 
        <props>
          <prop key="java.naming.factory.initial">weblogic.jndi.WLInitialContextFactory</prop>
          <prop key="java.naming.provider.url">t3://sedm3202.ent.agt.ab.ca:21022</prop>
        </props>
     </property>
    <property name="businessInterface"><value>com.telus.customermgt.service.BillingAccountMgtSvc</value></property>
</bean-->

<!--  Encryptoin setting Start for Pilot -->
    <bean id="encryptUtil"
     class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">

        <property name="staticMethod">
            <value>com.telus.framework.crypto.EncryptionUtil.setCrypto</value>
        </property>
        
        <property name="arguments">
            <list>
                <ref bean="cryptoImpl" />
            </list>
        </property>
    </bean>
    
    <bean id="cryptoImpl"
                 class="com.telus.framework.crypto.impl.pilot.PilotCryptoImpl"
                 init-method="init">
        <property name="key1"><value>EbT5a8Fuq</value></property>
        <property name="key2"><value>aYt2gv6R</value></property>
        <property name="key3"><value>9bFp3Gz4k</value></property>     
        <!-- 
        uncomment when these properties are defined in an env.xml and loaded by file which will be loaded by the configuration framework
        <property name="key1"><value>${encryption/key1}</value></property>
        <property name="key2"><value>${encryption/key2}</value></property>
        <property name="key3"><value>${encryption/key3}</value></property>  
		-->
        
    </bean>
  <!--	Encryptoin setting End -->

</beans>